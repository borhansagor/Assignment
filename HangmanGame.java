/*I declare that all material in this assessment task is my own work except where there is a clear acknowledgement 
 * or reference to the work of others.I further declare that complied with, and agree
 * to abide by, the UIS Academic Integrity Policy at the University website. https://www.uis.edu/academicintegrity
 * Author's name: Borhan Kader UIN: 672595290 Date:07/08/2018
 * 
 * Randomization of key Word: The way each keyWord are randomized is at first all the words in the specified file is stored in an ArrayList
 * of string which then is shuffled using the Collection.shufle; and then the resultWord is created by taking the element in the first index
 * of the shuffled array each time the game plays.
 */

package kaderTask5;

import java.io.*;
import java.util.*;

public class kaderTask5 {

	//Declaring static variables to keep account of player/computer wins as well as filename and an ArrayList of strings for method usage;
		static int playerWins;
		static int computerWins;
		static String fileName;
		static ArrayList <String> allWords= new ArrayList<String>();
		
		/*This method calls the readFile method which accepts string input and Scans file named "parameter", and stores it in a ArrayList
		 * which is then shuffled using Collection.shuffle method and finally the keyWord for our game is stored in the resultWord 
		 * using the first index element of the shuffled ArrayList.
		 */
		
		public static String getResultWord() throws Exception 
		{	
			ArrayList<String> array= new ArrayList<String>();
			array=readFile(fileName);
			Collections.shuffle(array);
			String resultWord=array.get(0);
			return resultWord;
		}
		
		//This method returns a StringBuilder which is filled with '*' with the length of resultWord(key Word for game)
		public static StringBuilder builderWord(String resultWord)
		{
			String [] astrik= new String [resultWord.length()];
			for(int i=0;i<resultWord.length();i++)
			{
				astrik[i]="*";
			}
			StringBuilder builder = new StringBuilder();
			for(String s : astrik) {
			    builder.append(s);
			}
			
			return builder;
		}
		/*This method streams in a file given by its String parameter, and has a try catch exception to have correct file name, if not then
		 * program exits using System.exit(0);
		 */
		
		public static ArrayList<String> readFile(String name) throws Exception
		{
			File file= new File(name);
			ArrayList <String> array=new ArrayList<String>();
			try
			{
				Scanner scan = new Scanner(file);
				
				while(scan.hasNextLine())
				{
					array.add(scan.nextLine());
				}
			}
			catch(FileNotFoundException exception)
			{
				System.out.println("The file " + file.getPath() + " was not found.");
				System.exit(0);
			}
			
			return array;
		}
		
		/*This method starts off with initializing String resultWord with random string generated by the getResultWord method; and following 
		 * that adds that string to the static array of string allWords, to keep count of all the words used. Subsequently a hidden word of the same
		 * length as the resultWord is created which reveals 1 letter at a time if the user guesses it right. and plays the game until user runs out
		 * of bad guesses.
		 */
		public static void play() throws Exception
		{
			String resultWord=getResultWord();
			allWords.add(resultWord);
			
			StringBuilder sb=builderWord(resultWord);
			System.out.println(sb.toString());
			String userinput="";
			
			Scanner scan = new Scanner(System.in);
			int counter=0;
			//counter to keep count of bad guesses; 11=you lose;
			int numberofmisses=0;
			// keeps track of player missed turns for each game;
			System.out.println("Guess the letters..");
			
			while(counter<11)
			{	
				//try/catch for cases: user inputs "\n" new line, or if they input the same character they have already input prior turn;
				if(!sb.toString().equals(resultWord))
				{	
					userinput=scan.nextLine();
					char inputChar;
					while(true)
					try
					{
						inputChar=userinput.charAt(0);
						break;
					}
					catch(StringIndexOutOfBoundsException e)
					{
						System.out.println("Guess the letters.." );
						userinput=scan.nextLine();
						
					}
					
					if(sb.toString().contains(userinput))
					{
						System.out.println("You have already put in "+ userinput);
					}
				}
				//Winning scenario for user, increases playerWins and prints out number of missed turns;
				if(sb.toString().equals(resultWord))
				{
					System.out.println("You win");
					System.out.println("you have missed "+numberofmisses+" times");
					playerWins++;
					break;
				}
				//If player guesses a letter right a letter is revealed ;
				else if(resultWord.contains(userinput))
					{	
						for(int j=0;j<resultWord.length();j++)
						{
							if(resultWord.charAt(j)==userinput.charAt(0))
							{
							sb.setCharAt(j, userinput.charAt(0));
							}	
						}
						if(counter<11)
						System.out.println(sb);
					}
				/*If player guesses wrong number of misses is increased, and pressure increased along with number of bad guesses left is printout
				 * unless player already made 11 bad guesses then it prints they lost along with number of misses and the correct word.  
				 */
				else
				{	
					numberofmisses++;
					
					counter++;
					
					if(counter<11)
					{
						System.out.println("You guessed wrong! Pressure increased");
						System.out.println("Bad guess remaining: "+(11-numberofmisses));
						System.out.println(sb);
					}
					if(counter>=11)
					{
						computerWins++;
						System.out.println("You lose");
						System.out.println("you have missed "+numberofmisses+" times");
						System.out.println("Courrect word was " +resultWord);
					}
				}
				
			}
			
		}

		
		
		public static void main(String [] args) throws Exception
			{
			
			
				
				boolean play=true;//boolean to play or not play the game based on user input;
				Scanner scan=  new Scanner(System.in);
				
				//static String fileName is read and passed to methods for further progression;
				System.out.println("Enter the name of the .txt file to read from [Format:xyz.txt]" );
				 fileName=scan.nextLine();
				 
				 char inputChar;
				 //try/catch in case of "\n" new line input by user
					while(true)
					try
					{
						inputChar=fileName.charAt(0);
						break;
					}
					catch(StringIndexOutOfBoundsException e)
					{
						System.out.println("Enter the name of the .txt file to read from [Format:xyz.txt]" );
						fileName=scan.nextLine();
						
					}
				
				while(play)
				{	System.out.println("welcome to hangman press 1 to play 2 to quit");
					int input=0;
					//parse int input to look for valid input, if not error message is shown and user is asked for correct input;
					
					
					while (true)
					{
						String scanner=scan.next();
						try
						{
							input=Integer.parseInt(scanner);
							break;
						}
						catch(NumberFormatException e)
						{
							System.out.println("Enter (1) or (2) only");
						}
					}
					
					//if user inputs 1 then we play the game if not we end the game and player/computer wins as well as all the words used are printed
					if(input==1)
					{
						play();
					}
					else
					{	System.out.println("You have won: "+playerWins+" times");
						System.out.println("Computer has won: "+computerWins+" times");
						System.out.println("all the words used are\n"+allWords.toString());
						
						play=false;
				
					}
				
				}
				
			}
			
	
	
	
}
